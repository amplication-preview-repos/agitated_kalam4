/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserAnswer } from "./UserAnswer";
import { UserAnswerCountArgs } from "./UserAnswerCountArgs";
import { UserAnswerFindManyArgs } from "./UserAnswerFindManyArgs";
import { UserAnswerFindUniqueArgs } from "./UserAnswerFindUniqueArgs";
import { DeleteUserAnswerArgs } from "./DeleteUserAnswerArgs";
import { UserAnswerService } from "../userAnswer.service";
@graphql.Resolver(() => UserAnswer)
export class UserAnswerResolverBase {
  constructor(protected readonly service: UserAnswerService) {}

  async _userAnswersMeta(
    @graphql.Args() args: UserAnswerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserAnswer])
  async userAnswers(
    @graphql.Args() args: UserAnswerFindManyArgs
  ): Promise<UserAnswer[]> {
    return this.service.userAnswers(args);
  }

  @graphql.Query(() => UserAnswer, { nullable: true })
  async userAnswer(
    @graphql.Args() args: UserAnswerFindUniqueArgs
  ): Promise<UserAnswer | null> {
    const result = await this.service.userAnswer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserAnswer)
  async deleteUserAnswer(
    @graphql.Args() args: DeleteUserAnswerArgs
  ): Promise<UserAnswer | null> {
    try {
      return await this.service.deleteUserAnswer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
